// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoRequestMultiError, or nil if none found.
func (m *CreateTodoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 30 {
		err := CreateTodoRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateTodoRequestMultiError(errors)
	}

	return nil
}

// CreateTodoRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTodoRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoRequestMultiError) AllErrors() []error { return m }

// CreateTodoRequestValidationError is the validation error returned by
// CreateTodoRequest.Validate if the designated constraints aren't met.
type CreateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoRequestValidationError) ErrorName() string {
	return "CreateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoRequestValidationError{}

// Validate checks the field values on CreateTodoRequestV2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoRequestV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoRequestV2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoRequestV2MultiError, or nil if none found.
func (m *CreateTodoRequestV2) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoRequestV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTodo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTodoRequestV2ValidationError{
					field:  "Todo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTodoRequestV2ValidationError{
					field:  "Todo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoRequestV2ValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTodoRequestV2MultiError(errors)
	}

	return nil
}

// CreateTodoRequestV2MultiError is an error wrapping multiple validation
// errors returned by CreateTodoRequestV2.ValidateAll() if the designated
// constraints aren't met.
type CreateTodoRequestV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoRequestV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoRequestV2MultiError) AllErrors() []error { return m }

// CreateTodoRequestV2ValidationError is the validation error returned by
// CreateTodoRequestV2.Validate if the designated constraints aren't met.
type CreateTodoRequestV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoRequestV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoRequestV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoRequestV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoRequestV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoRequestV2ValidationError) ErrorName() string {
	return "CreateTodoRequestV2ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoRequestV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoRequestV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoRequestV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoRequestV2ValidationError{}

// Validate checks the field values on TodoList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TodoList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TodoList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TodoListMultiError, or nil
// if none found.
func (m *TodoList) ValidateAll() error {
	return m.validate(true)
}

func (m *TodoList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTodos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TodoListValidationError{
						field:  fmt.Sprintf("Todos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TodoListValidationError{
						field:  fmt.Sprintf("Todos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TodoListValidationError{
					field:  fmt.Sprintf("Todos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TodoListMultiError(errors)
	}

	return nil
}

// TodoListMultiError is an error wrapping multiple validation errors returned
// by TodoList.ValidateAll() if the designated constraints aren't met.
type TodoListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoListMultiError) AllErrors() []error { return m }

// TodoListValidationError is the validation error returned by
// TodoList.Validate if the designated constraints aren't met.
type TodoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoListValidationError) ErrorName() string { return "TodoListValidationError" }

// Error satisfies the builtin error interface
func (e TodoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoListValidationError{}

// Validate checks the field values on GetTodoByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTodoByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTodoByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTodoByIDRequestMultiError, or nil if none found.
func (m *GetTodoByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTodoByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTodoByIDRequestMultiError(errors)
	}

	return nil
}

// GetTodoByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetTodoByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTodoByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTodoByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTodoByIDRequestMultiError) AllErrors() []error { return m }

// GetTodoByIDRequestValidationError is the validation error returned by
// GetTodoByIDRequest.Validate if the designated constraints aren't met.
type GetTodoByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodoByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodoByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodoByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodoByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodoByIDRequestValidationError) ErrorName() string {
	return "GetTodoByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTodoByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodoByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodoByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodoByIDRequestValidationError{}

// Validate checks the field values on GetTodoByIDRequestWithQueryParams with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTodoByIDRequestWithQueryParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTodoByIDRequestWithQueryParams
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTodoByIDRequestWithQueryParamsMultiError, or nil if none found.
func (m *GetTodoByIDRequestWithQueryParams) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTodoByIDRequestWithQueryParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return GetTodoByIDRequestWithQueryParamsMultiError(errors)
	}

	return nil
}

// GetTodoByIDRequestWithQueryParamsMultiError is an error wrapping multiple
// validation errors returned by
// GetTodoByIDRequestWithQueryParams.ValidateAll() if the designated
// constraints aren't met.
type GetTodoByIDRequestWithQueryParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTodoByIDRequestWithQueryParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTodoByIDRequestWithQueryParamsMultiError) AllErrors() []error { return m }

// GetTodoByIDRequestWithQueryParamsValidationError is the validation error
// returned by GetTodoByIDRequestWithQueryParams.Validate if the designated
// constraints aren't met.
type GetTodoByIDRequestWithQueryParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodoByIDRequestWithQueryParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodoByIDRequestWithQueryParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodoByIDRequestWithQueryParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodoByIDRequestWithQueryParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodoByIDRequestWithQueryParamsValidationError) ErrorName() string {
	return "GetTodoByIDRequestWithQueryParamsValidationError"
}

// Error satisfies the builtin error interface
func (e GetTodoByIDRequestWithQueryParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodoByIDRequestWithQueryParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodoByIDRequestWithQueryParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodoByIDRequestWithQueryParamsValidationError{}

// Validate checks the field values on Todo with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Todo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Todo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TodoMultiError, or nil if none found.
func (m *Todo) ValidateAll() error {
	return m.validate(true)
}

func (m *Todo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TodoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TodoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TodoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TodoMultiError(errors)
	}

	return nil
}

// TodoMultiError is an error wrapping multiple validation errors returned by
// Todo.ValidateAll() if the designated constraints aren't met.
type TodoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoMultiError) AllErrors() []error { return m }

// TodoValidationError is the validation error returned by Todo.Validate if the
// designated constraints aren't met.
type TodoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoValidationError) ErrorName() string { return "TodoValidationError" }

// Error satisfies the builtin error interface
func (e TodoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoValidationError{}
